"use client";

import { useAuth } from "@/context/AuthContext";
import { useEffect } from "react";
import { useRouter } from "next/navigation";

interface ProtectedRouteProps {
  children: React.ReactNode;
}

export default function ProtectedRoute({ children }: ProtectedRouteProps) {
  const { isAuthenticated, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading && !isAuthenticated) {
      console.log(
        "游뛂 Usu치rio n칚o autenticado - redirecionando para p치gina inicial"
      );
      console.log(
        "游댌 Debug - loading:",
        loading,
        "isAuthenticated:",
        isAuthenticated
      );

      // Verificar se estamos em um iframe (MFE)
      if (window.parent && window.parent !== window) {
        // Se estamos em um iframe, enviar mensagem para o parent
        window.parent.postMessage({ type: "LOGOUT_REDIRECT" }, "*");
      } else {
        // Se n칚o estamos em iframe, redirecionar diretamente
        window.location.href = "/";
      }
    }
  }, [isAuthenticated, loading, router]);

  // Mostrar loading enquanto verifica autentica칞칚o
  if (loading) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#47A138] mx-auto mb-4"></div>
          <p className="text-gray-600">Verificando autentica칞칚o...</p>
        </div>
      </div>
    );
  }

  // Se n칚o est치 autenticado, n칚o renderiza nada (ser치 redirecionado)
  if (!isAuthenticated) {
    return null;
  }

  // Se est치 autenticado, renderiza o conte칰do
  return <>{children}</>;
}
